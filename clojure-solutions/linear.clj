(defn func [s] (fn [a b] (mapv s a b)))
(def v+ (func +))
(def v- (func -))
(def v* (func *))
(def vd (func /))
(defn v*s [a b] (mapv (partial * b) a))
(defn s*v [a b] (mapv (partial * a) b))
(defn scalar [a b] (reduce + (v* a b)))
(defn vect [a b] (vector (- (* (nth a 1) (nth b 2)) (* (nth a 2) (nth b 1)))
                         (- (* (nth a 2) (nth b 0)) (* (nth a 0) (nth b 2)))
                         (- (* (nth a 0) (nth b 1)) (* (nth a 1) (nth b 0)))))
(def m+ (func v+))
(def m* (func v*))
(def m- (func v-))
(def md (func vd))
(defn transpose [m] (apply mapv vector m))
(defn m*s [a b] (mapv (partial s*v b) a))
(defn m*v [a b] (mapv (partial scalar b) a))
(defn m*m [a b] (transpose (mapv (partial m*v a) (transpose b))))
(defn ft [s] (fn ff [a b] (if (vector? a) (mapv ff a b) (s a b))))
(def t+ (ft +))
(def t- (ft -))
(def t* (ft *))
(def td (ft /))